type Post {
  id: ID!
  postOwnerId: String!
  postOwnerUsername: String!
  postTitle: String!
  postBody: String!
  createdAt: String
  comments(filter: ModelCommentFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelCommentConnection
  likes(filter: ModelLikeFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelLikeConnection
  updatedAt: AWSDateTime!
}

type Comment {
  id: ID!
  commentOwnerId: String!
  commentOwnerUsername: String!
  post: Post
  content: String!
  createdAt: String!
  updatedAt: AWSDateTime!
}

type Like {
  id: ID!
  numberLikes: Int!
  likeOwnerId: String!
  likeOwnerUsername: String!
  post: Post
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Company {
  id: ID!
  companyName: String!
  companyAddress: String!
  companyCountry: String!
  companyPostcode: String!
  companyPhone: String!
  companyEmail: String!
  companyBankName: String!
  companySortcode: String!
  companyAccountNumber: String!
  companyAccountHolder: String!
  companyRegNumber: String
  companyVAT: String
  companyBirthday: String
  createdAt: String
  invoices(filter: ModelInvoiceFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelInvoiceConnection
  expenses(filter: ModelExpenseFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelExpenseConnection
  updatedAt: AWSDateTime!
}

type Invoice {
  id: ID!
  fromName: String!
  fromAddress: String!
  fromPhone: String!
  commentOwnerUsername: String!
  content: String!
  createdAt: String!
  company: Company
  products(filter: ModelProductFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelProductConnection
  updatedAt: AWSDateTime!
}

type Expense {
  id: ID!
  merchant: String!
  expenseDate: String!
  currency: String!
  amount: Float!
  remarks: String!
  category: String!
  attendees: String!
  report: String!
  reimbursable: Boolean!
  status: String!
  createdAt: String!
  company: Company
  updatedAt: AWSDateTime!
}

type Product {
  id: ID!
  name: String!
  imageUrl: String!
  price: Float!
  unit: String!
  category: String!
  description: String!
  inventory: Int!
  status: String!
  createdAt: String!
  invoice: Invoice
  updatedAt: AWSDateTime!
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelPostConnection {
  items: [Post]
  nextToken: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelPostFilterInput {
  id: ModelIDInput
  postOwnerId: ModelStringInput
  postOwnerUsername: ModelStringInput
  postTitle: ModelStringInput
  postBody: ModelStringInput
  createdAt: ModelStringInput
  and: [ModelPostFilterInput]
  or: [ModelPostFilterInput]
  not: ModelPostFilterInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Query {
  getPost(id: ID!): Post
  listPosts(filter: ModelPostFilterInput, limit: Int, nextToken: String): ModelPostConnection
  getComment(id: ID!): Comment
  listComments(filter: ModelCommentFilterInput, limit: Int, nextToken: String): ModelCommentConnection
  getLike(id: ID!): Like
  listLikes(filter: ModelLikeFilterInput, limit: Int, nextToken: String): ModelLikeConnection
  getCompany(id: ID!): Company
  listCompanys(filter: ModelCompanyFilterInput, limit: Int, nextToken: String): ModelCompanyConnection
  getInvoice(id: ID!): Invoice
  listInvoices(filter: ModelInvoiceFilterInput, limit: Int, nextToken: String): ModelInvoiceConnection
  getExpense(id: ID!): Expense
  listExpenses(filter: ModelExpenseFilterInput, limit: Int, nextToken: String): ModelExpenseConnection
  getProduct(id: ID!): Product
  listProducts(filter: ModelProductFilterInput, limit: Int, nextToken: String): ModelProductConnection
}

input CreatePostInput {
  id: ID
  postOwnerId: String!
  postOwnerUsername: String!
  postTitle: String!
  postBody: String!
  createdAt: String
}

input UpdatePostInput {
  id: ID!
  postOwnerId: String
  postOwnerUsername: String
  postTitle: String
  postBody: String
  createdAt: String
}

input DeletePostInput {
  id: ID
}

type Mutation {
  createPost(input: CreatePostInput!, condition: ModelPostConditionInput): Post
  updatePost(input: UpdatePostInput!, condition: ModelPostConditionInput): Post
  deletePost(input: DeletePostInput!, condition: ModelPostConditionInput): Post
  createComment(input: CreateCommentInput!, condition: ModelCommentConditionInput): Comment
  updateComment(input: UpdateCommentInput!, condition: ModelCommentConditionInput): Comment
  deleteComment(input: DeleteCommentInput!, condition: ModelCommentConditionInput): Comment
  createLike(input: CreateLikeInput!, condition: ModelLikeConditionInput): Like
  updateLike(input: UpdateLikeInput!, condition: ModelLikeConditionInput): Like
  deleteLike(input: DeleteLikeInput!, condition: ModelLikeConditionInput): Like
  createCompany(input: CreateCompanyInput!, condition: ModelCompanyConditionInput): Company
  updateCompany(input: UpdateCompanyInput!, condition: ModelCompanyConditionInput): Company
  deleteCompany(input: DeleteCompanyInput!, condition: ModelCompanyConditionInput): Company
  createInvoice(input: CreateInvoiceInput!, condition: ModelInvoiceConditionInput): Invoice
  updateInvoice(input: UpdateInvoiceInput!, condition: ModelInvoiceConditionInput): Invoice
  deleteInvoice(input: DeleteInvoiceInput!, condition: ModelInvoiceConditionInput): Invoice
  createExpense(input: CreateExpenseInput!, condition: ModelExpenseConditionInput): Expense
  updateExpense(input: UpdateExpenseInput!, condition: ModelExpenseConditionInput): Expense
  deleteExpense(input: DeleteExpenseInput!, condition: ModelExpenseConditionInput): Expense
  createProduct(input: CreateProductInput!, condition: ModelProductConditionInput): Product
  updateProduct(input: UpdateProductInput!, condition: ModelProductConditionInput): Product
  deleteProduct(input: DeleteProductInput!, condition: ModelProductConditionInput): Product
}

input ModelPostConditionInput {
  postOwnerId: ModelStringInput
  postOwnerUsername: ModelStringInput
  postTitle: ModelStringInput
  postBody: ModelStringInput
  createdAt: ModelStringInput
  and: [ModelPostConditionInput]
  or: [ModelPostConditionInput]
  not: ModelPostConditionInput
}

type Subscription {
  onCreatePost: Post @aws_subscribe(mutations: ["createPost"])
  onUpdatePost: Post @aws_subscribe(mutations: ["updatePost"])
  onDeletePost: Post @aws_subscribe(mutations: ["deletePost"])
  onCreateComment: Comment @aws_subscribe(mutations: ["createComment"])
  onUpdateComment: Comment @aws_subscribe(mutations: ["updateComment"])
  onDeleteComment: Comment @aws_subscribe(mutations: ["deleteComment"])
  onCreateLike: Like @aws_subscribe(mutations: ["createLike"])
  onUpdateLike: Like @aws_subscribe(mutations: ["updateLike"])
  onDeleteLike: Like @aws_subscribe(mutations: ["deleteLike"])
  onCreateCompany: Company @aws_subscribe(mutations: ["createCompany"])
  onUpdateCompany: Company @aws_subscribe(mutations: ["updateCompany"])
  onDeleteCompany: Company @aws_subscribe(mutations: ["deleteCompany"])
  onCreateInvoice: Invoice @aws_subscribe(mutations: ["createInvoice"])
  onUpdateInvoice: Invoice @aws_subscribe(mutations: ["updateInvoice"])
  onDeleteInvoice: Invoice @aws_subscribe(mutations: ["deleteInvoice"])
  onCreateExpense: Expense @aws_subscribe(mutations: ["createExpense"])
  onUpdateExpense: Expense @aws_subscribe(mutations: ["updateExpense"])
  onDeleteExpense: Expense @aws_subscribe(mutations: ["deleteExpense"])
  onCreateProduct: Product @aws_subscribe(mutations: ["createProduct"])
  onUpdateProduct: Product @aws_subscribe(mutations: ["updateProduct"])
  onDeleteProduct: Product @aws_subscribe(mutations: ["deleteProduct"])
}

type ModelCommentConnection {
  items: [Comment]
  nextToken: String
}

input ModelCommentFilterInput {
  id: ModelIDInput
  commentOwnerId: ModelStringInput
  commentOwnerUsername: ModelStringInput
  content: ModelStringInput
  createdAt: ModelStringInput
  and: [ModelCommentFilterInput]
  or: [ModelCommentFilterInput]
  not: ModelCommentFilterInput
}

input CreateCommentInput {
  id: ID
  commentOwnerId: String!
  commentOwnerUsername: String!
  content: String!
  createdAt: String
  commentPostId: ID
}

input UpdateCommentInput {
  id: ID!
  commentOwnerId: String
  commentOwnerUsername: String
  content: String
  createdAt: String
  commentPostId: ID
}

input DeleteCommentInput {
  id: ID
}

input ModelCommentConditionInput {
  commentOwnerId: ModelStringInput
  commentOwnerUsername: ModelStringInput
  content: ModelStringInput
  createdAt: ModelStringInput
  and: [ModelCommentConditionInput]
  or: [ModelCommentConditionInput]
  not: ModelCommentConditionInput
}

type ModelLikeConnection {
  items: [Like]
  nextToken: String
}

input ModelLikeFilterInput {
  id: ModelIDInput
  numberLikes: ModelIntInput
  likeOwnerId: ModelStringInput
  likeOwnerUsername: ModelStringInput
  and: [ModelLikeFilterInput]
  or: [ModelLikeFilterInput]
  not: ModelLikeFilterInput
}

input CreateLikeInput {
  id: ID
  numberLikes: Int!
  likeOwnerId: String!
  likeOwnerUsername: String!
  likePostId: ID
}

input UpdateLikeInput {
  id: ID!
  numberLikes: Int
  likeOwnerId: String
  likeOwnerUsername: String
  likePostId: ID
}

input DeleteLikeInput {
  id: ID
}

input ModelLikeConditionInput {
  numberLikes: ModelIntInput
  likeOwnerId: ModelStringInput
  likeOwnerUsername: ModelStringInput
  and: [ModelLikeConditionInput]
  or: [ModelLikeConditionInput]
  not: ModelLikeConditionInput
}

type ModelCompanyConnection {
  items: [Company]
  nextToken: String
}

input ModelCompanyFilterInput {
  id: ModelIDInput
  companyName: ModelStringInput
  companyAddress: ModelStringInput
  companyCountry: ModelStringInput
  companyPostcode: ModelStringInput
  companyPhone: ModelStringInput
  companyEmail: ModelStringInput
  companyBankName: ModelStringInput
  companySortcode: ModelStringInput
  companyAccountNumber: ModelStringInput
  companyAccountHolder: ModelStringInput
  companyRegNumber: ModelStringInput
  companyVAT: ModelStringInput
  companyBirthday: ModelStringInput
  createdAt: ModelStringInput
  and: [ModelCompanyFilterInput]
  or: [ModelCompanyFilterInput]
  not: ModelCompanyFilterInput
}

input CreateCompanyInput {
  id: ID
  companyName: String!
  companyAddress: String!
  companyCountry: String!
  companyPostcode: String!
  companyPhone: String!
  companyEmail: String!
  companyBankName: String!
  companySortcode: String!
  companyAccountNumber: String!
  companyAccountHolder: String!
  companyRegNumber: String
  companyVAT: String
  companyBirthday: String
  createdAt: String
}

input UpdateCompanyInput {
  id: ID!
  companyName: String
  companyAddress: String
  companyCountry: String
  companyPostcode: String
  companyPhone: String
  companyEmail: String
  companyBankName: String
  companySortcode: String
  companyAccountNumber: String
  companyAccountHolder: String
  companyRegNumber: String
  companyVAT: String
  companyBirthday: String
  createdAt: String
}

input DeleteCompanyInput {
  id: ID
}

input ModelCompanyConditionInput {
  companyName: ModelStringInput
  companyAddress: ModelStringInput
  companyCountry: ModelStringInput
  companyPostcode: ModelStringInput
  companyPhone: ModelStringInput
  companyEmail: ModelStringInput
  companyBankName: ModelStringInput
  companySortcode: ModelStringInput
  companyAccountNumber: ModelStringInput
  companyAccountHolder: ModelStringInput
  companyRegNumber: ModelStringInput
  companyVAT: ModelStringInput
  companyBirthday: ModelStringInput
  createdAt: ModelStringInput
  and: [ModelCompanyConditionInput]
  or: [ModelCompanyConditionInput]
  not: ModelCompanyConditionInput
}

type ModelInvoiceConnection {
  items: [Invoice]
  nextToken: String
}

input ModelInvoiceFilterInput {
  id: ModelIDInput
  fromName: ModelStringInput
  fromAddress: ModelStringInput
  fromPhone: ModelStringInput
  commentOwnerUsername: ModelStringInput
  content: ModelStringInput
  createdAt: ModelStringInput
  and: [ModelInvoiceFilterInput]
  or: [ModelInvoiceFilterInput]
  not: ModelInvoiceFilterInput
}

input CreateInvoiceInput {
  id: ID
  fromName: String!
  fromAddress: String!
  fromPhone: String!
  commentOwnerUsername: String!
  content: String!
  createdAt: String
  invoiceCompanyId: ID
}

input UpdateInvoiceInput {
  id: ID!
  fromName: String
  fromAddress: String
  fromPhone: String
  commentOwnerUsername: String
  content: String
  createdAt: String
  invoiceCompanyId: ID
}

input DeleteInvoiceInput {
  id: ID
}

input ModelInvoiceConditionInput {
  fromName: ModelStringInput
  fromAddress: ModelStringInput
  fromPhone: ModelStringInput
  commentOwnerUsername: ModelStringInput
  content: ModelStringInput
  createdAt: ModelStringInput
  and: [ModelInvoiceConditionInput]
  or: [ModelInvoiceConditionInput]
  not: ModelInvoiceConditionInput
}

type ModelExpenseConnection {
  items: [Expense]
  nextToken: String
}

input ModelExpenseFilterInput {
  id: ModelIDInput
  merchant: ModelStringInput
  expenseDate: ModelStringInput
  currency: ModelStringInput
  amount: ModelFloatInput
  remarks: ModelStringInput
  category: ModelStringInput
  attendees: ModelStringInput
  report: ModelStringInput
  reimbursable: ModelBooleanInput
  status: ModelStringInput
  createdAt: ModelStringInput
  and: [ModelExpenseFilterInput]
  or: [ModelExpenseFilterInput]
  not: ModelExpenseFilterInput
}

input CreateExpenseInput {
  id: ID
  merchant: String!
  expenseDate: String!
  currency: String!
  amount: Float!
  remarks: String!
  category: String!
  attendees: String!
  report: String!
  reimbursable: Boolean!
  status: String!
  createdAt: String
  expenseCompanyId: ID
}

input UpdateExpenseInput {
  id: ID!
  merchant: String
  expenseDate: String
  currency: String
  amount: Float
  remarks: String
  category: String
  attendees: String
  report: String
  reimbursable: Boolean
  status: String
  createdAt: String
  expenseCompanyId: ID
}

input DeleteExpenseInput {
  id: ID
}

input ModelExpenseConditionInput {
  merchant: ModelStringInput
  expenseDate: ModelStringInput
  currency: ModelStringInput
  amount: ModelFloatInput
  remarks: ModelStringInput
  category: ModelStringInput
  attendees: ModelStringInput
  report: ModelStringInput
  reimbursable: ModelBooleanInput
  status: ModelStringInput
  createdAt: ModelStringInput
  and: [ModelExpenseConditionInput]
  or: [ModelExpenseConditionInput]
  not: ModelExpenseConditionInput
}

type ModelProductConnection {
  items: [Product]
  nextToken: String
}

input ModelProductFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  imageUrl: ModelStringInput
  price: ModelFloatInput
  unit: ModelStringInput
  category: ModelStringInput
  description: ModelStringInput
  inventory: ModelIntInput
  status: ModelStringInput
  createdAt: ModelStringInput
  and: [ModelProductFilterInput]
  or: [ModelProductFilterInput]
  not: ModelProductFilterInput
}

input CreateProductInput {
  id: ID
  name: String!
  imageUrl: String!
  price: Float!
  unit: String!
  category: String!
  description: String!
  inventory: Int!
  status: String!
  createdAt: String
  productInvoiceId: ID
}

input UpdateProductInput {
  id: ID!
  name: String
  imageUrl: String
  price: Float
  unit: String
  category: String
  description: String
  inventory: Int
  status: String
  createdAt: String
  productInvoiceId: ID
}

input DeleteProductInput {
  id: ID
}

input ModelProductConditionInput {
  name: ModelStringInput
  imageUrl: ModelStringInput
  price: ModelFloatInput
  unit: ModelStringInput
  category: ModelStringInput
  description: ModelStringInput
  inventory: ModelIntInput
  status: ModelStringInput
  createdAt: ModelStringInput
  and: [ModelProductConditionInput]
  or: [ModelProductConditionInput]
  not: ModelProductConditionInput
}
